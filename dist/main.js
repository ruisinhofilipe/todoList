(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n.mainDiv {\n    display: flex;\n}\n\n.projectsDiv {\n    width: 35%;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n}\n\n.addPrj {\n    display: flex;\n}\n\n.displayProjects {\n    display: flex;\n    flex-direction: column;\n    /* align-items: center; */\n    gap: 1rem;\n}\n\n.projectsNameDiv {\n    margin-left: 1rem;\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 75%;\n    justify-content: space-between;\n}\n\n.projectsNameDivClicked {\n    margin-left: 1rem;\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 75%;\n    justify-content: space-between;\n    background-color: rgb(239, 239, 158);\n}\n\n.projectsNameDiv:hover {\n    cursor: pointer;\n    background-color: beige;\n    font-size: 1.47rem;\n    border: 1px solid black;\n    border-radius: 0.6rem;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,aAAa;IACb,aAAa;IACb,UAAU;IACV,8BAA8B;AAClC;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,aAAa;IACb,aAAa;IACb,UAAU;IACV,8BAA8B;IAC9B,oCAAoC;AACxC;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,kBAAkB;IAClB,uBAAuB;IACvB,qBAAqB;AACzB",sourcesContent:["* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n.mainDiv {\n    display: flex;\n}\n\n.projectsDiv {\n    width: 35%;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n}\n\n.addPrj {\n    display: flex;\n}\n\n.displayProjects {\n    display: flex;\n    flex-direction: column;\n    /* align-items: center; */\n    gap: 1rem;\n}\n\n.projectsNameDiv {\n    margin-left: 1rem;\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 75%;\n    justify-content: space-between;\n}\n\n.projectsNameDivClicked {\n    margin-left: 1rem;\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 75%;\n    justify-content: space-between;\n    background-color: rgb(239, 239, 158);\n}\n\n.projectsNameDiv:hover {\n    cursor: pointer;\n    background-color: beige;\n    font-size: 1.47rem;\n    border: 1px solid black;\n    border-radius: 0.6rem;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var p=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var f=o(A,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=t(a[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),d=t(216),l=t.n(d),u=t(589),p=t.n(u),A=t(28),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),n()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;const m=(e,n,t,...r)=>{const o=document.createElement(e);for(let e in n)o.setAttribute(e,n[e]);return o.textContent=t,r.forEach((e=>{o.appendChild(e)})),o};let v=["Standard"],y=0;const C=document.querySelector(".projectsDiv");function g(){!function(e){let n=document.querySelectorAll(".projectsNameDiv");for(let e=0;e<n.length;e++)n[e].remove()}(),v.forEach((e=>{let n=v.indexOf(e);const t=document.querySelector(".displayProjects"),r=m("div",{class:"projectsNameDiv",index:n}),o=m("div",{class:"projectsName"},e),a=m("button",{class:"removeProject"},"x");r.appendChild(o),r.appendChild(a),t.appendChild(r),r.addEventListener("click",(()=>{y=r.getAttribute("index"),document.querySelector(".currentPrj").textContent=v[y],console.log(b[y]),g()})),a.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation();let n=a.parentNode.getAttribute("index");v.splice(n,1),b.splice(n,1),v.length>=1?(y=0,document.querySelector(".currentPrj").textContent=v[y],I()):document.querySelector(".currentPrj").textContent="You have no active projects.",g()}))}))}let b=[[]];const h=document.querySelector(".todosDiv"),x=document.querySelector("#newTodoButton"),B=(e,n,t,r)=>({title:e,description:n,dueDate:t,priority:r});function I(){x.addEventListener("click",(()=>{let e=document.getElementById("title").value,n=document.getElementById("description").value,t=document.getElementById("dueDate").value;""==t&&(t="No date preview");let r=document.getElementsByClassName("priority")[0].value;""===e||" "===e?alert("Please introduce a valid title."):b[y].push(B(e,n,t,r)),function(e,n,t,r){const o=m("div",{class:"displayTodos"},void 0,m("p",{class:"titleTodo"},e),m("p",{class:"descriptionTodo"},n),m("p",{class:"dateTodo"},t),m("p",{class:"priorityTodo"},r));h.appendChild(o)}(e,n,t,r)})),console.log(b[y])}!function(){const e=m("div",{class:"addPrj"},void 0,m("input",{type:"text",class:"addProjectInput",placeholder:"Your new project"}),m("button",{class:"addProjectButton"},"Create project"));C.appendChild(e);const n=m("div",{class:"currentPrj"},v[y]);C.appendChild(n);const t=m("div",{class:"displayProjects"});C.appendChild(t),g(),document.querySelector(".addProjectButton").addEventListener("click",(()=>{var e;null===(e=document.getElementsByClassName("addProjectInput")[0].value)||v.includes(e)||""===e||" "===e?alert("Please, introduce a valid project name."):(v.push(e),b.push([])),document.getElementsByClassName("addProjectInput")[0].value="",g()}))}(),I()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
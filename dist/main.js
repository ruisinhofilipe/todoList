(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n.mainDiv {\n    min-height: 100vh;\n    display: flex;\n}\n\n.projectsDiv {\n    background-color: #575E9B;\n    width: 35%;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n}\n\n.addPrj {\n    display: flex;\n}\n\n.displayProjects {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 1rem;\n}\n\n.projectsNameDiv {\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 65%;\n    border-radius: 0.6rem;\n    justify-content: space-between;\n    background-color: #16205E;\n}\n\n.projectsNameDiv.clicked {\n    cursor: pointer;\n    background-color: #6978d3;\n    font-size: 1.47rem;\n    border-radius: 0.6rem;\n    width: 72%;\n}\n\n.projectsNameDiv:hover {\n    cursor: pointer;\n    background-color: #333e86;\n    border-radius: 0.6rem;\n    width: 67%;\n}\n\n.projectsNameDiv.clicked:hover {\n    cursor: pointer;\n    background-color: #6978d3;\n    font-size: 1.47rem;\n    border-radius: 0.6rem;\n    width: 72%;\n}\n\n.todosDiv {\n    width: 65%;\n    background-color: #363E88;\n}\n\n.displayTodos {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.displayTodo {\n    display: flex;\n    gap: 1.5rem;\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 75%;\n    justify-content: space-between;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,aAAa;IACb,UAAU;IACV,qBAAqB;IACrB,8BAA8B;IAC9B,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;IACzB,kBAAkB;IAClB,qBAAqB;IACrB,UAAU;AACd;;AAEA;IACI,eAAe;IACf,yBAAyB;IACzB,qBAAqB;IACrB,UAAU;AACd;;AAEA;IACI,eAAe;IACf,yBAAyB;IACzB,kBAAkB;IAClB,qBAAqB;IACrB,UAAU;AACd;;AAEA;IACI,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,WAAW;IACX,iBAAiB;IACjB,aAAa;IACb,aAAa;IACb,UAAU;IACV,8BAA8B;AAClC",sourcesContent:["* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\n.mainDiv {\n    min-height: 100vh;\n    display: flex;\n}\n\n.projectsDiv {\n    background-color: #575E9B;\n    width: 35%;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n}\n\n.addPrj {\n    display: flex;\n}\n\n.displayProjects {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 1rem;\n}\n\n.projectsNameDiv {\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 65%;\n    border-radius: 0.6rem;\n    justify-content: space-between;\n    background-color: #16205E;\n}\n\n.projectsNameDiv.clicked {\n    cursor: pointer;\n    background-color: #6978d3;\n    font-size: 1.47rem;\n    border-radius: 0.6rem;\n    width: 72%;\n}\n\n.projectsNameDiv:hover {\n    cursor: pointer;\n    background-color: #333e86;\n    border-radius: 0.6rem;\n    width: 67%;\n}\n\n.projectsNameDiv.clicked:hover {\n    cursor: pointer;\n    background-color: #6978d3;\n    font-size: 1.47rem;\n    border-radius: 0.6rem;\n    width: 72%;\n}\n\n.todosDiv {\n    width: 65%;\n    background-color: #363E88;\n}\n\n.displayTodos {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.displayTodo {\n    display: flex;\n    gap: 1.5rem;\n    font-size: 1.5rem;\n    padding: 1rem;\n    display: flex;\n    width: 75%;\n    justify-content: space-between;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],l=a[s]||0,A="".concat(s," ").concat(l);a[s]=l+1;var u=t(A),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,r);r.byIndex=c,n.splice(c,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var d=r(e,o),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),d=t.n(c),s=t(216),l=t.n(s),A=t(589),u=t.n(A),p=t(28),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const f=(e,n,t,...r)=>{const o=document.createElement(e);for(let e in n)o.setAttribute(e,n[e]);return o.textContent=t,r.forEach((e=>{o.appendChild(e)})),o};function v(e){document.querySelectorAll(e).forEach((e=>{e.remove()}))}let y,C=[];const h=document.querySelector(".projectsDiv");function B(){document.querySelectorAll(".projectsNameDiv").forEach((e=>{y==e.getAttribute("index")?e.classList.add("clicked"):e.classList.remove("clicked")}))}function I(){!function(e){let n=document.querySelectorAll(".projectsNameDiv");for(let e=0;e<n.length;e++)n[e].remove()}(),C.forEach((e=>{let n=C.indexOf(e);const t=document.querySelector(".displayProjects"),r=f("div",{class:"projectsNameDiv",index:n}),o=f("div",{class:"projectsName"},e),a=f("button",{class:"removeProject"},"x");r.appendChild(o),r.appendChild(a),t.appendChild(r),r.addEventListener("click",(()=>{y=r.getAttribute("index"),E(y),I(),B()})),a.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation();let n=a.parentNode.getAttribute("index");C.splice(n,1),g.splice(n,1),C.length>=1?(y=0,I(),E(y),B()):(y="",I(),v(".displayTodo"))}))}))}let g=[];const b=document.querySelector(".todosDiv"),x=document.querySelector("#newTodoButton"),j=document.querySelector(".displayTodos");function E(e){if(C.length>0){v(".displayTodo");for(let n=0;n<g[e].length;n++){const t=f("div",{class:"displayTodo"},void 0);for(let r in g[e][n])t.appendChild(f("p",{class:`${r}Todo`},`${r}: ${g[e][n][r]}`)),j.appendChild(t),b.appendChild(j)}}}!function(){const e=f("div",{class:"addPrj"},void 0,f("input",{type:"text",class:"addProjectInput",placeholder:"Your new project"}),f("button",{class:"addProjectButton"},"Create project"));h.appendChild(e);const n=f("div",{class:"displayProjects"});h.appendChild(n),I(),document.querySelector(".addProjectButton").addEventListener("click",(()=>{var e;null===(e=document.getElementsByClassName("addProjectInput")[0].value)||C.includes(e)||""===e||" "===e?alert("Please, introduce a valid project name or you that you haven't introduced yet."):(C.push(e),g.push([])),document.getElementsByClassName("addProjectInput")[0].value="",I()}))}(),x.addEventListener("click",(()=>{if(0===C.length)alert("There's no projects");else{let e=document.getElementById("title").value,n=document.getElementById("description").value,t=document.getElementById("dueDate").value;""==t&&(t="No date preview");let r=document.getElementsByClassName("priority")[0].value;g[y].push(((e,n,t,r)=>({title:e,description:n,dueDate:t,priority:r}))(e,n,t,r)),E(y),document.getElementById("title").value="",document.getElementById("description").value="",document.getElementById("dueDate").value="",document.getElementsByClassName("priority")[0].value}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,